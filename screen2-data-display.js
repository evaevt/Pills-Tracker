// –≠–∫—Ä–∞–Ω 2: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const AirtableService = require('./airtable-service');
const { DISPLAY_TYPES, ACTION_TYPES } = require('./airtable-config');

class DataDisplayScreen {
  constructor() {
    this.airtableService = new AirtableService();
    this.currentUserId = null;
    this.displayData = null;
    this.refreshInterval = null;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞
  async initialize(userId, autoRefresh = true) {
    this.currentUserId = userId;
    console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await this.loadDisplayData();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (autoRefresh) {
      this.startAutoRefresh(30000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  async loadDisplayData() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const displayRecords = await this.airtableService.getDisplayData(
        this.currentUserId
      );

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userActions = await this.airtableService.getUserActions(
        this.currentUserId,
        50
      );

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      this.displayData = this.processDataForDisplay(displayRecords, userActions);
      
      console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', this.displayData);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
      this.notifyDataUpdate();
      
      return this.displayData;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  processDataForDisplay(displayRecords, userActions) {
    const processedData = {
      summary: this.generateSummary(userActions),
      list: this.generateListView(userActions),
      grid: this.generateGridView(userActions),
      chart: this.generateChartData(userActions),
      lastUpdated: new Date().toISOString()
    };

    return processedData;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏
  generateSummary(actions) {
    const summary = {
      totalActions: actions.length,
      completedTasks: 0,
      pendingTasks: 0,
      recentActivity: [],
      categories: new Map()
    };

    actions.forEach(record => {
      const fields = record.fields;
      
      // –ü–æ–¥—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö/–Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
      if (fields.completed) {
        summary.completedTasks++;
      } else {
        summary.pendingTasks++;
      }

      // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–µ–π—Å—Ç–≤–∏–π
      const actionType = fields.action_type;
      if (!summary.categories.has(actionType)) {
        summary.categories.set(actionType, 0);
      }
      summary.categories.set(actionType, summary.categories.get(actionType) + 1);

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–¥–∞–≤–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø–µ—Ä–≤—ã–µ 5)
      if (summary.recentActivity.length < 5) {
        const actionData = JSON.parse(fields.action_data || '{}');
        summary.recentActivity.push({
          id: record.id,
          type: actionType,
          data: actionData,
          timestamp: fields.timestamp,
          screenName: fields.screen_name
        });
      }
    });

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Map –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    summary.categoriesObject = Object.fromEntries(summary.categories);
    
    return summary;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞
  generateListView(actions) {
    return actions.map(record => {
      const fields = record.fields;
      const actionData = JSON.parse(fields.action_data || '{}');
      
      return {
        id: record.id,
        title: this.getActionTitle(fields.action_type, actionData),
        subtitle: this.getActionSubtitle(fields.action_type, actionData),
        timestamp: fields.timestamp,
        completed: fields.completed,
        icon: this.getActionIcon(fields.action_type),
        data: actionData
      };
    });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏
  generateGridView(actions) {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –¥–Ω—è–º
    const gridData = new Map();
    
    actions.forEach(record => {
      const fields = record.fields;
      const date = new Date(fields.timestamp).toLocaleDateString();
      
      if (!gridData.has(date)) {
        gridData.set(date, []);
      }
      
      const actionData = JSON.parse(fields.action_data || '{}');
      gridData.get(date).push({
        id: record.id,
        type: fields.action_type,
        data: actionData,
        completed: fields.completed,
        time: new Date(fields.timestamp).toLocaleTimeString()
      });
    });

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    return Array.from(gridData.entries()).map(([date, items]) => ({
      date: date,
      items: items,
      totalItems: items.length,
      completedItems: items.filter(item => item.completed).length
    }));
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  generateChartData(actions) {
    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
    const activityByDay = new Map();
    
    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ —Ç–∏–ø–∞–º
    const actionTypes = new Map();
    
    actions.forEach(record => {
      const fields = record.fields;
      const date = new Date(fields.timestamp).toLocaleDateString();
      
      // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
      if (!activityByDay.has(date)) {
        activityByDay.set(date, 0);
      }
      activityByDay.set(date, activityByDay.get(date) + 1);
      
      // –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
      if (!actionTypes.has(fields.action_type)) {
        actionTypes.set(fields.action_type, 0);
      }
      actionTypes.set(fields.action_type, actionTypes.get(fields.action_type) + 1);
    });

    return {
      dailyActivity: {
        labels: Array.from(activityByDay.keys()),
        data: Array.from(activityByDay.values())
      },
      actionTypeDistribution: {
        labels: Array.from(actionTypes.keys()),
        data: Array.from(actionTypes.values())
      },
      completionRate: this.calculateCompletionRate(actions)
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  getActionTitle(actionType, actionData) {
    switch (actionType) {
      case ACTION_TYPES.CHECKBOX_MARKED:
        return actionData.itemName || '–≠–ª–µ–º–µ–Ω—Ç –æ—Ç–º–µ—á–µ–Ω';
      case ACTION_TYPES.DATA_SUBMITTED:
        return `–§–æ—Ä–º–∞: ${actionData.formType || '–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã'}`;
      case ACTION_TYPES.ITEM_SELECTED:
        return actionData.itemName || '–≠–ª–µ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω';
      default:
        return '–î–µ–π—Å—Ç–≤–∏–µ';
    }
  }

  getActionSubtitle(actionType, actionData) {
    switch (actionType) {
      case ACTION_TYPES.CHECKBOX_MARKED:
        return actionData.isChecked ? '–û—Ç–º–µ—á–µ–Ω–æ' : '–°–Ω—è—Ç–æ';
      case ACTION_TYPES.DATA_SUBMITTED:
        return `–ü–æ–ª–µ–π: ${Object.keys(actionData.fields || {}).length}`;
      default:
        return '';
    }
  }

  getActionIcon(actionType) {
    const icons = {
      [ACTION_TYPES.CHECKBOX_MARKED]: '‚úì',
      [ACTION_TYPES.DATA_SUBMITTED]: 'üìù',
      [ACTION_TYPES.ITEM_SELECTED]: 'üëÜ',
      [ACTION_TYPES.PREFERENCE_CHANGED]: '‚öôÔ∏è'
    };
    return icons[actionType] || '‚Ä¢';
  }

  calculateCompletionRate(actions) {
    if (actions.length === 0) return 0;
    const completed = actions.filter(record => record.fields.completed).length;
    return Math.round((completed / actions.length) * 100);
  }

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  startAutoRefresh(intervalMs) {
    this.stopAutoRefresh(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    
    this.refreshInterval = setInterval(async () => {
      try {
        await this.loadDisplayData();
        console.log('–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
      }
    }, intervalMs);
  }

  stopAutoRefresh() {
    if (this.refreshInterval) {
      clearInterval(this.refreshInterval);
      this.refreshInterval = null;
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ UI –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  notifyDataUpdate() {
    if (typeof window !== 'undefined' && window.dispatchEvent) {
      const event = new CustomEvent('displayDataUpdated', {
        detail: { data: this.displayData }
      });
      window.dispatchEvent(event);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  getDisplayDataByType(displayType) {
    if (!this.displayData) return null;
    
    switch (displayType) {
      case DISPLAY_TYPES.LIST:
        return this.displayData.list;
      case DISPLAY_TYPES.GRID:
        return this.displayData.grid;
      case DISPLAY_TYPES.CHART:
        return this.displayData.chart;
      case DISPLAY_TYPES.SUMMARY:
      default:
        return this.displayData.summary;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞
  destroy() {
    this.stopAutoRefresh();
    this.displayData = null;
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function exampleUsage() {
  const screen = new DataDisplayScreen();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
  await screen.initialize('user123', true);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∫–∞
  const listData = screen.getDisplayDataByType(DISPLAY_TYPES.LIST);
  console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ø–∏—Å–∫–∞:', listData);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  const chartData = screen.getDisplayDataByType(DISPLAY_TYPES.CHART);
  console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤:', chartData);
  
  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  // screen.stopAutoRefresh();
}

module.exports = DataDisplayScreen;